{"name":"Validator","tagline":"A simple validation library in PHP","body":"# Flikore Validator\r\n\r\n*A simple validation library*.\r\n\r\n[![Build Status](https://travis-ci.org/flikore/validator.png)](https://travis-ci.org/flikore/validator)\r\n[![Coverage Status](https://coveralls.io/repos/flikore/validator/badge.png?branch=master)](https://coveralls.io/r/flikore/validator?branch=master)\r\n\r\nFlikore validator is a validation library for PHP aimed to be simple and extensible.\r\n\r\n## Instalation\r\n\r\n### Composer\r\n\r\n[Composer](http://getcomposer.org) is the preferred method to install this validator. Simply add to your `composer.json`:\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"flikore/validator\": \"dev-develop\"\r\n    }\r\n}\r\n```\r\n\r\nRun `composer install`, then include the autoload file in your project:\r\n\r\n```php\r\n<?php\r\n\r\nrequire_once 'vendor/autoload.php';\r\n\r\n// Do validation stuff\r\n```\r\n\r\n### Installing with Git\r\n\r\n* Clone this repository in a folder on your project:\r\n\r\n```\r\ngit clone https://github.com/flikore/validator.git vendor/flikore/validator\r\n```\r\n\r\n* Include the `autoload.php` file in the bootstrap for your project:\r\n\r\n```php\r\n<?php\r\n    \r\nrequire_once 'vendor/flikore/validator/autoload.php';\r\n\r\n// Do validation stuff\r\n```\r\n\r\nAn alternative is to create a submodule instead of cloning the repository. This way you don't need to push this library to your own repository and can also update it more easily:\r\n\r\n```\r\ngit submodule add https://github.com/flikore/validator.git vendor/flikore/validator\r\n```\r\n\r\n### Download\r\n\r\nYou can also download the [tarball](https://github.com/flikore/validator/tarball/master \"tarball\") (or the [zipball](https://github.com/flikore/validator/zipball/master \"zipball\")) and set it up in one of your project folders.\r\n\r\n## Usage\r\n\r\n### Basic value validation\r\n\r\n```php\r\n<?php\r\n\r\nuse Flikore\\Validator\\Validators as v;\r\n\r\n// Instantiate an existing validator\r\n$v = new v\\ExactValueValidator(5);\r\n\r\n// Use the \"validate\" method to check if a value is valid\r\nvar_dump($v->validate(5));    // bool(true)\r\nvar_dump($v->validate(4));    // bool(false)\r\nvar_dump($v->validate(0));    // bool(false)\r\nvar_dump($v->validate(null)); // bool(true)\r\nvar_dump($v->validate(''));   // bool(true)\r\n```\r\n\r\nThe validators ignores null values and empty strings. If you like to make sure a value is not empty, use the NotEmptyValidator.\r\n\r\n```php\r\n<?php\r\n\r\nuse Flikore\\Validator\\Validators as v;\r\n\r\n$v = new v\\NotEmptyValidator();\r\n\r\nvar_dump($v->validate(null));    // bool(false)\r\nvar_dump($v->validate(array())); // bool(false)\r\nvar_dump($v->validate(''));      // bool(false)\r\nvar_dump($v->validate(0));       // bool(true)\r\n```\r\n\r\n### Multiple validators\r\n\r\nIf you want to check if multiple conditions apply, use the `ValidatorCombo` class. It can join any number and validators and act as a validator itself (so it can also be use in other `ValidationCombo`).\r\n\r\n```php\r\n<?php\r\n\r\nuse Flikore\\Validator\\Validators as v;\r\n\r\n$combo = new Flikore\\Validator\\ValidationCombo();\r\n\r\n$combo->addValidator(new v\\ExactLengthValidator(5));\r\n$combo->addValidator(new v\\NotEmptyValidator());\r\n\r\nvar_dump($combo->validate('12345'));  // bool(true)\r\nvar_dump($combo->validate('1234'));   // bool(false)\r\nvar_dump($combo->validate('123456')); // bool(false)\r\nvar_dump($combo->validate(''));       // bool(false)\r\nvar_dump($combo->validate(null));     // bool(false)\r\n```\r\n\r\n### Recursive validation\r\n\r\nTo apply a validator to every element in an array, use the `RecursiveValidator` class. It receives one validator in the constructor and checks the elements with such validator.\r\n\r\n```php\r\n<?php\r\n\r\nuse Flikore\\Validator\\Validators as v;\r\n\r\n// Recursive check every element in an array against a validator\r\n// Use the RecursiveValidator class.\r\n$v = new v\\RecursiveValidator(new v\\NotEmptyValidator);\r\n\r\n// Example array\r\n$ok = array(\r\n    'this',\r\n    'is',\r\n    'ok'\r\n);\r\n\r\nvar_dump($v->validate($ok)); // bool(true)\r\n\r\n// Another example\r\n$notOk = array(\r\n    'this',\r\n    'is',\r\n    'not',\r\n    'ok',\r\n    'oops' => '', //<- this is empty\r\n);\r\n\r\nvar_dump($v->validate($notOk)); // bool(false)\r\n\r\n// To get the key where there was an error, use the %arrKey% template\r\n$v->setErrorMessage('The key \"%arrKey%\" is empty.');\r\necho $v->getErrorMessage(); // prints: The key \"oops\" is empty.\r\n```\r\n\r\n### Usage with exceptions\r\n\r\nTo throw an exception on a validation error, use the `assert` method instead of `validate`. It throws a `ValidationException` with a custom message for each validator.\r\n\r\n```php\r\n<?php\r\n\r\nuse Flikore\\Validator\\Validators as v;\r\n\r\n$v = new v\\ExactValueValidator(5);\r\n\r\n// Throws a ValidationException with the message:\r\n// \"The value must be exactly 5.\"\r\n$v->assert(2);\r\n```\r\n\r\n#### Custom messages\r\n\r\nThe message of the exception can be set on the validator using the method `setErrorMessage()`. If the validator is a Combo, then the message setted with this method will be the message shown to any validation error (to avoid this behavior, set the messages of the validators *inside* the combo).\r\n\r\nEach validator has a set of values that can be used in the message. The value named `key` exists in all validator and defaults to `\"value\"`. Those keys replace the sequence `%key%` inside the message. To override a default value of a key, use the `addKeyValue` method (this can be used to set the `key` as the name of the form field, for example).\r\n\r\n**Example**:\r\n```php\r\n<?php\r\n\r\nuse Flikore\\Validator\\Validators as v;\r\n\r\n$v = new v\\ExactLengthValidator(5);\r\n\r\n// Setting a new message template\r\n$v->setErrorMessage('The %key% is not %length% %c% long as it should be.');\r\n\r\n// Override the default key name\r\n$v->addKeyValue('key', 'input');\r\n// Create a custom key\r\n$v->addKeyValue('c', 'characters');\r\n\r\n// Captures the error\r\ntry\r\n{\r\n    $v->assert('Name');\r\n}\r\ncatch (Flikore\\Validator\\Exception\\ValidatorException $e)\r\n{\r\n    echo $e->getMessage(); // Shows \"The input is not 5 characters long as it should be.\"\r\n}\r\n```\r\n\r\n### Validating arrays and objects\r\n\r\nThe `ValidationSet` class can be used as a shortcut to test all the values in an array or the properties of an object all at once. The usage is pretty straightforward:\r\n\r\n```php\r\n<?php\r\n\r\nuse Flikore\\Validator\\Validators as v;\r\n\r\n$set = new \\Flikore\\Validator\\ValidationSet();\r\n\r\n// Add a single rule to a key\r\n$set->addRule('name', new v\\NotEmptyValidator());\r\n// This rule is chained with the previous one, both must be valid\r\n$set->addRule('name', new v\\MinLengthValidator(5));\r\n\r\n// Multiple rules can be added at once with an array\r\n// Those rules will be *added* to the \"name\" key, and will not exclude the others.\r\n$set->addRules('name', array(\r\n    new v\\MaxLengthValidator(30),\r\n    new v\\RegexValidator('/^[a-z ]+$/i'),\r\n));\r\n\r\n// Just call validate (or assert) to check if it's ok\r\nvar_dump($set->validate(array('name' => 'Cool Name'))); // bool(true)\r\nvar_dump($set->validate(array('name' => 'aaa')));       // bool(false) The minimum length is 5\r\nvar_dump($set->validate(array('name' => 'aa4a5')));     // bool(false) Doesn't match regex\r\nvar_dump($set->validate(array('name' => '')));          // bool(false) Can't be empty\r\n\r\n// Another way is to construct the set with all the rules:\r\n// ***Note: Even in this way, new rules can also be added later with the add methods.\r\n$set = new \\Flikore\\Validator\\ValidationSet(array(\r\n    'name' => array(\r\n        new v\\NotEmptyValidator(),\r\n        new v\\MinLengthValidator(5),\r\n    ),\r\n    'age'  => new v\\MinValueValidator(13),\r\n));\r\n\r\nvar_dump($set->validate(array('name' => 'this is ok',          'age' => 14))); // bool(true)\r\nvar_dump($set->validate(array('name' => 'oops',                'age' => 14))); // bool(false)\r\nvar_dump($set->validate(array('name' => 'the age is not good', 'age' => 12))); // bool(false)\r\n```\r\n\r\n#### Comparing with other keys\r\n\r\nIt's also possible to use another key or attribute as the input value for a validator (e.g. validate if one field is equal to another). To do that, you need to use two other classes combined: `ValidationValue` and `ValidationKey`.\r\n\r\n`ValidationValue` should be included in a set as it were a validator. Its constructor requires a validator as the first argument (can be a string with a FQCN or a dummy validator object) and the arguments to the validator constructor must follow it. To use a field from the validated object in the constructor, pass it as a `ValidationKey` object with it's key property being the name of the attribute or key you want to grab from the value being validated.\r\n\r\nLet's make that clear with and example. To make sure the value of `key1` is strictly equal to the value of `key2` inside the same array, do like the following code:\r\n\r\n```php\r\n<?php\r\n\r\nuse Flikore\\Validator\\ValidationKey;\r\nuse Flikore\\Validator\\ValidationSet;\r\nuse Flikore\\Validator\\ValidationValue;\r\nuse Flikore\\Validator\\Validators as v;\r\n\r\n$set = new ValidationSet();\r\n\r\n$set->addRule('key1',\r\n        // The first argument is a dummy object (can also be a FQCN string).\r\n        new ValidationValue(new v\\EqualsValidator('dummy'),\r\n        // The second argument is the first for the EqualsValidator constructor.\r\n        // In this case, we want to grab the value of \"key2\", so we create a new\r\n        // ValidationKey and specify \"key2\" as its key.\r\n        new ValidationKey('key2'),\r\n        // This is the third argument of ValidationValue, which will be passed as\r\n        // the second argument to EqualsValidator constructor. This is \"true\", because\r\n        // we want the comparison to be strict.\r\n        true)\r\n); // end addRule)\r\n\r\n$ok = array(\r\n    'key1' => 'equal',\r\n    'key2' => 'equal',\r\n);\r\n\r\nvar_dump($set->validate($ok)); // bool(true)\r\n\r\n$notOk = array(\r\n    'key1' => 'equal',\r\n    'key2' => 'not equal',\r\n);\r\n\r\nvar_dump($set->validate($notOk)); // bool(false)\r\n\r\n$notStrict = array(\r\n    'key1' =>  5,\r\n    'key2' => '5',\r\n);\r\n\r\nvar_dump($set->validate($notStrict)); // bool(false)\r\n```\r\n\r\nKeep in mind that the values that are passed to the validator are not checked in the `ValidationValue` constructor. So if there's something wrong, it'll only cause an error when the validation is taking place and the real `Validator` is constructed.\r\n\r\n**Note**: this doesn't work with `ValidationCombo`, but since you can add multiple rules to the same key, this should not be a problem.\r\n\r\n#### Sets and exceptions\r\n\r\nWith a `ValidationSet`, exception messages work in a different way than with a `Validator`. The main exception has no message attached, but it contains an array of errors with the keys being the validated array keys (or object properties) and the values being the child validator exception.\r\n\r\nAlso, the key name you add to the set is also setted as the `%key%` template value in the error messages. To change that to another value, use the third argument of `addRule` and `addRules` methods with the value you want). This can be used if you want to change the language of the message or to specify a more user friendly form label.\r\n\r\n**Example**:\r\n\r\n```php\r\n<?php\r\n\r\nuse Flikore\\Validator\\Validators as v;\r\n\r\n$set = new \\Flikore\\Validator\\ValidationSet(array(\r\n    'user_name' => array(\r\n        new v\\NotEmptyValidator(),\r\n        new v\\MinLengthValidator(5),\r\n    ),\r\n    'user_age'  => new v\\MinValueValidator(13),\r\n        ), \r\n    // Labels:\r\n    array(\r\n        'user_name' => 'Name',\r\n        'user_age'  => 'Age',\r\n));\r\n\r\ntry\r\n{\r\n    $set->assert(array('user_name' => 'oops', 'user_age' => 10));\r\n}\r\ncatch (Flikore\\Validator\\Exception\\ValidatorException $e)\r\n{\r\n    foreach ($e->getErrors() as $key => $innerException)\r\n    {\r\n        echo $key . ': ' . $innerException->getMessage() . PHP_EOL;\r\n    }\r\n    // Output:\r\n    // user_name: The Name must have at least 5 characters.\r\n    // user_age: The Age must be equal or greater than 13.\r\n}\r\n```\r\n\r\n## Available validators\r\n\r\nCurrently, there are the following validator classes:\r\n\r\n* `AfterDateTimeValidator`\r\n* `AlphaNumericValidator`\r\n* `AlphaValidator`\r\n* `BeforeDateTimeValidator`\r\n* `DateTimeValidator`\r\n* `DateValidator` *(deprecated)*\r\n* `EmailValidator`\r\n* `EqualsValidator`\r\n* `ExactLengthValidator`\r\n* `ExactValueValidator`\r\n* `GreaterThanValidator`\r\n* `IPv4Validator`\r\n* `IPv6Validator`\r\n* `InstanceOfValidator`\r\n* `LengthBetweenValidator`\r\n* `LessThanValidator`\r\n* `MaxDateTimeValidator`\r\n* `MaxLengthValidator`\r\n* `MaxValueValidator`\r\n* `MinAgeValidator`\r\n* `MinDateTimeValidator`\r\n* `MinLengthValidator`\r\n* `MinValueValidator`\r\n* `NotEmptyValidator`\r\n* `NotEqualsValidator`\r\n* `NumericValidator`\r\n* `OrValidator`\r\n* `RecursiveValidator`\r\n* `RegexValidator`\r\n* `UriValidator`\r\n* `ValueBetweenValidator`\r\n\r\n## Reference\r\n\r\nThe documentation reference for all classes (including the validators) can be found at [http://flikore.github.io/validator/docs/index.html](http://flikore.github.io/validator/docs/index.html \"http://flikore.github.io/validator/docs/index.html\").\r\n\r\nThe `examples` folder contains examples that can be executed. Also, check the `unittests` folder for examples of every validator class being used.\r\n\r\n## Contributing\r\n\r\nIf you want to contribute with the coding, follow these steps:\r\n\r\n1. Fork this repository.\r\n2. Create a new feature branch in your fork.\r\n3. Create unit tests for your changes.\r\n4. Change or add new code to conform your tests.\r\n5. Commit the modifications.\r\n6. Repeat 3-5 until you're done (you can create as many commits as you want).\r\n5. Send a pull request (with your feature branch's last commit).\r\n\r\nRemember that anything in this repository is licensed with the [MIT](http://opensource.org/licenses/MIT) license.\r\n\r\n### Bug report\r\n\r\nSend problems and suggestions to the [GitHub repository issue tracker](https://github.com/flikore/validator/issues).","google":"UA-48627703-1","note":"Don't delete this file! It's used internally to help with page regeneration."}