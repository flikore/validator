<?php
namespace Flikore\Validator;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2014-03-02 at 01:53:50.
 */
class ValidatorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Validator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = $this->getMockForAbstractClass('Flikore\Validator\Validator');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

        /**
     * 
     */
    public function testGetErrorMessage()
    {
        $msg = 'Test';
        $this->object->setErrorMessage($msg);
        $this->assertEquals($msg, $this->object->getErrorMessage());
        
    }

    /**
     * @covers Flikore\Validator\Validator::addKeyValue
     * @todo   Implement testAddKeyValue().
     */
    public function testAddKeyValue()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    
    public function testValidate()
    {
        $this->object->expects($this->any())
                ->method('doValidate')
                ->will($this->returnValue(true));
        
        $this->assertTrue($this->object->validate('anything'));
    }
    
    /**
     * @expectedException \Flikore\Validator\Exception\ValidatorException
     */
    public function testAssertFail()
    {
        $this->object->expects($this->any())
                ->method('doValidate')
                ->will($this->returnValue(false));
        
        $this->object->assert('anything');
    }
    
    public function testAssertSuccess()
    {
        $this->object->expects($this->any())
                ->method('doValidate')
                ->will($this->returnValue(true));
        
        $this->object->assert('anything');
    }
}
